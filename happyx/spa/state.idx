nimTitle	state	happyx/spa/state.html	module src/happyx/spa/state		0
nim	State	happyx/spa/state.html#State	type State		36
nim	enableRouting	happyx/spa/state.html#enableRouting	var enableRouting		40
nim	remember	happyx/spa/state.html#remember,T	proc remember[T](val: T): State[T]		43
nim	val=	happyx/spa/state.html#val=,State[T],T	proc val=[T](self: State[T]; value: T)		48
nim	`$`	happyx/spa/state.html#$,State[T]	proc `$`[T](self: State[T]): string		55
nim	`==`	happyx/spa/state.html#==,,	proc `==`[T](self`gensym0, other`gensym0: State[T]): bool		98
nim	`==`	happyx/spa/state.html#==,,T	proc `==`[T](self`gensym0: State[T]; other`gensym0: T): bool		109
nim	`!=`	happyx/spa/state.html#!=,,	proc `!=`[T](self`gensym1, other`gensym1: State[T]): bool		98
nim	`!=`	happyx/spa/state.html#!=,,T	proc `!=`[T](self`gensym1: State[T]; other`gensym1: T): bool		110
nim	`>=`	happyx/spa/state.html#>=,,	proc `>=`[T](self`gensym2, other`gensym2: State[T]): bool		98
nim	`>=`	happyx/spa/state.html#>=,,T	proc `>=`[T](self`gensym2: State[T]; other`gensym2: T): bool		111
nim	`<=`	happyx/spa/state.html#<=,,	proc `<=`[T](self`gensym3, other`gensym3: State[T]): bool		98
nim	`<=`	happyx/spa/state.html#<=,,T	proc `<=`[T](self`gensym3: State[T]; other`gensym3: T): bool		112
nim	`not`	happyx/spa/state.html#not	proc `not`[T](self`gensym4: State[T]): bool		114
nim	`&`	happyx/spa/state.html#&,,	proc `&`[T](self`gensym5, other`gensym5: State[T]): T		74
nim	`&`	happyx/spa/state.html#&,T,	proc `&`[T](other`gensym5: T; self`gensym5: State[T]): T		76
nim	`&`	happyx/spa/state.html#&,,T	proc `&`[T](self`gensym5: State[T]; other`gensym5: T): T		116
nim	`+`	happyx/spa/state.html#+,,	proc `+`[T](self`gensym6, other`gensym6: State[T]): T		74
nim	`+`	happyx/spa/state.html#+,T,	proc `+`[T](other`gensym6: T; self`gensym6: State[T]): T		76
nim	`+`	happyx/spa/state.html#+,,T	proc `+`[T](self`gensym6: State[T]; other`gensym6: T): T		117
nim	`-`	happyx/spa/state.html#-,,	proc `-`[T](self`gensym7, other`gensym7: State[T]): T		74
nim	`-`	happyx/spa/state.html#-,T,	proc `-`[T](other`gensym7: T; self`gensym7: State[T]): T		76
nim	`-`	happyx/spa/state.html#-,,T	proc `-`[T](self`gensym7: State[T]; other`gensym7: T): T		118
nim	`*`	happyx/spa/state.html#*,,	proc `*`[T](self`gensym8, other`gensym8: State[T]): T		74
nim	`*`	happyx/spa/state.html#*,T,	proc `*`[T](other`gensym8: T; self`gensym8: State[T]): T		76
nim	`*`	happyx/spa/state.html#*,,T	proc `*`[T](self`gensym8: State[T]; other`gensym8: T): T		119
nim	`/`	happyx/spa/state.html#/,,	proc `/`[T](self`gensym9, other`gensym9: State[T]): T		74
nim	`/`	happyx/spa/state.html#/,T,	proc `/`[T](other`gensym9: T; self`gensym9: State[T]): T		76
nim	`/`	happyx/spa/state.html#/,,T	proc `/`[T](self`gensym9: State[T]; other`gensym9: T): T		120
nim	`!`	happyx/spa/state.html#!,,	proc `!`[T](self`gensym10, other`gensym10: State[T]): T		74
nim	`!`	happyx/spa/state.html#!,T,	proc `!`[T](other`gensym10: T; self`gensym10: State[T]): T		76
nim	`!`	happyx/spa/state.html#!,,T	proc `!`[T](self`gensym10: State[T]; other`gensym10: T): T		121
nim	`^`	happyx/spa/state.html#^,,	proc `^`[T](self`gensym11, other`gensym11: State[T]): T		74
nim	`^`	happyx/spa/state.html#^,T,	proc `^`[T](other`gensym11: T; self`gensym11: State[T]): T		76
nim	`^`	happyx/spa/state.html#^,,T	proc `^`[T](self`gensym11: State[T]; other`gensym11: T): T		122
nim	`%`	happyx/spa/state.html#%,,	proc `%`[T](self`gensym12, other`gensym12: State[T]): T		74
nim	`%`	happyx/spa/state.html#%,T,	proc `%`[T](other`gensym12: T; self`gensym12: State[T]): T		76
nim	`%`	happyx/spa/state.html#%,,T	proc `%`[T](self`gensym12: State[T]; other`gensym12: T): T		123
nim	`@`	happyx/spa/state.html#@,,	proc `@`[T](self`gensym13, other`gensym13: State[T]): T		74
nim	`@`	happyx/spa/state.html#@,T,	proc `@`[T](other`gensym13: T; self`gensym13: State[T]): T		76
nim	`@`	happyx/spa/state.html#@,,T	proc `@`[T](self`gensym13: State[T]; other`gensym13: T): T		124
nim	`>`	happyx/spa/state.html#>,,	proc `>`[T](self`gensym14, other`gensym14: State[T]): T		74
nim	`>`	happyx/spa/state.html#>,T,	proc `>`[T](other`gensym14: T; self`gensym14: State[T]): T		76
nim	`>`	happyx/spa/state.html#>,,T	proc `>`[T](self`gensym14: State[T]; other`gensym14: T): T		125
nim	`<`	happyx/spa/state.html#<,,	proc `<`[T](self`gensym15, other`gensym15: State[T]): T		74
nim	`<`	happyx/spa/state.html#<,T,	proc `<`[T](other`gensym15: T; self`gensym15: State[T]): T		76
nim	`<`	happyx/spa/state.html#<,,T	proc `<`[T](self`gensym15: State[T]; other`gensym15: T): T		126
nim	`*=`	happyx/spa/state.html#*=,,	proc `*=`[T](self`gensym16: State[T]; other`gensym16: State[T])		83
nim	`*=`	happyx/spa/state.html#*=,T,	proc `*=`[T](other`gensym16: T; self`gensym16: State[T])		87
nim	`*=`	happyx/spa/state.html#*=,,T	proc `*=`[T](self`gensym16: State[T]; other`gensym16: T)		128
nim	`+=`	happyx/spa/state.html#+=,,	proc `+=`[T](self`gensym17: State[T]; other`gensym17: State[T])		83
nim	`+=`	happyx/spa/state.html#+=,T,	proc `+=`[T](other`gensym17: T; self`gensym17: State[T])		87
nim	`+=`	happyx/spa/state.html#+=,,T	proc `+=`[T](self`gensym17: State[T]; other`gensym17: T)		129
nim	`-=`	happyx/spa/state.html#-=,,	proc `-=`[T](self`gensym18: State[T]; other`gensym18: State[T])		83
nim	`-=`	happyx/spa/state.html#-=,T,	proc `-=`[T](other`gensym18: T; self`gensym18: State[T])		87
nim	`-=`	happyx/spa/state.html#-=,,T	proc `-=`[T](self`gensym18: State[T]; other`gensym18: T)		130
nim	`/=`	happyx/spa/state.html#/=,,	proc `/=`[T](self`gensym19: State[T]; other`gensym19: State[T])		83
nim	`/=`	happyx/spa/state.html#/=,T,	proc `/=`[T](other`gensym19: T; self`gensym19: State[T])		87
nim	`/=`	happyx/spa/state.html#/=,,T	proc `/=`[T](self`gensym19: State[T]; other`gensym19: T)		131
nim	`^=`	happyx/spa/state.html#^=,,	proc `^=`[T](self`gensym20: State[T]; other`gensym20: State[T])		83
nim	`^=`	happyx/spa/state.html#^=,T,	proc `^=`[T](other`gensym20: T; self`gensym20: State[T])		87
nim	`^=`	happyx/spa/state.html#^=,,T	proc `^=`[T](self`gensym20: State[T]; other`gensym20: T)		132
nim	`&=`	happyx/spa/state.html#&=,,	proc `&=`[T](self`gensym21: State[T]; other`gensym21: State[T])		83
nim	`&=`	happyx/spa/state.html#&=,T,	proc `&=`[T](other`gensym21: T; self`gensym21: State[T])		87
nim	`&=`	happyx/spa/state.html#&=,,T	proc `&=`[T](self`gensym21: State[T]; other`gensym21: T)		133
nim	`%=`	happyx/spa/state.html#%=,,	proc `%=`[T](self`gensym22: State[T]; other`gensym22: State[T])		83
nim	`%=`	happyx/spa/state.html#%=,T,	proc `%=`[T](other`gensym22: T; self`gensym22: State[T])		87
nim	`%=`	happyx/spa/state.html#%=,,T	proc `%=`[T](self`gensym22: State[T]; other`gensym22: T)		134
nim	`$=`	happyx/spa/state.html#$=,,	proc `$=`[T](self`gensym23: State[T]; other`gensym23: State[T])		83
nim	`$=`	happyx/spa/state.html#$=,T,	proc `$=`[T](other`gensym23: T; self`gensym23: State[T])		87
nim	`$=`	happyx/spa/state.html#$=,,T	proc `$=`[T](self`gensym23: State[T]; other`gensym23: T)		135
nim	`@=`	happyx/spa/state.html#@=,,	proc `@=`[T](self`gensym24: State[T]; other`gensym24: State[T])		83
nim	`@=`	happyx/spa/state.html#@=,T,	proc `@=`[T](other`gensym24: T; self`gensym24: State[T])		87
nim	`@=`	happyx/spa/state.html#@=,,T	proc `@=`[T](self`gensym24: State[T]; other`gensym24: T)		136
nim	`:=`	happyx/spa/state.html#:=,,	proc `:=`[T](self`gensym25: State[T]; other`gensym25: State[T])		83
nim	`:=`	happyx/spa/state.html#:=,T,	proc `:=`[T](other`gensym25: T; self`gensym25: State[T])		87
nim	`:=`	happyx/spa/state.html#:=,,T	proc `:=`[T](self`gensym25: State[T]; other`gensym25: T)		137
nim	`|=`	happyx/spa/state.html#|=,,	proc `|=`[T](self`gensym26: State[T]; other`gensym26: State[T])		83
nim	`|=`	happyx/spa/state.html#|=,T,	proc `|=`[T](other`gensym26: T; self`gensym26: State[T])		87
nim	`|=`	happyx/spa/state.html#|=,,T	proc `|=`[T](self`gensym26: State[T]; other`gensym26: T)		138
nim	`~=`	happyx/spa/state.html#~=,,	proc `~=`[T](self`gensym27: State[T]; other`gensym27: State[T])		83
nim	`~=`	happyx/spa/state.html#~=,T,	proc `~=`[T](other`gensym27: T; self`gensym27: State[T])		87
nim	`~=`	happyx/spa/state.html#~=,,T	proc `~=`[T](self`gensym27: State[T]; other`gensym27: T)		139
nim	`->`	happyx/spa/state.html#->.m,State,untyped	macro `->`(self: State; field: untyped): untyped		142
nim	get	happyx/spa/state.html#get,State[T]	proc get[T](self: State[T]): T		206
nim	len	happyx/spa/state.html#len,State[T]	proc len[T](self: State[T]): int		212
nim	set	happyx/spa/state.html#set,State[T],T	proc set[T](self: State[T]; value: T)		217
nim	`[]`	happyx/spa/state.html#[],State[array[T,U]],int	proc `[]`[T, U](self: State[array[T, U]]; idx: int): T		224
nim	`[]`	happyx/spa/state.html#[],State[seq[T]],int	proc `[]`[T](self: State[seq[T]]; idx: int): T		229
nim	`[]`	happyx/spa/state.html#[],State[array[T,U]],State[int]	proc `[]`[T, U](self: State[array[T, U]]; idx: State[int]): T		234
nim	`[]`	happyx/spa/state.html#[],State[seq[T]],State[int]	proc `[]`[T](self: State[seq[T]]; idx: State[int]): T		239
nim	`[]`	happyx/spa/state.html#[],State[TableRef[T,U]],T	proc `[]`[T, U](self: State[TableRef[T, U]]; idx: T): U		244
nim	`[]`	happyx/spa/state.html#[],State[StringTableRef],string	proc `[]`(self: State[StringTableRef]; idx: string): string		249
nim	`[]=`	happyx/spa/state.html#[]=,State[seq[T]],int,T	proc `[]=`[T](self: State[seq[T]]; idx: int; value: T)		254
nim	`[]=`	happyx/spa/state.html#[]=,State[array[T,U]],int,T	proc `[]=`[T, U](self: State[array[T, U]]; idx: int; value: T)		261
nim	`[]=`	happyx/spa/state.html#[]=,State[TableRef[T,U]],T,U	proc `[]=`[T, U](self: State[TableRef[T, U]]; idx: T; value: U)		268
nim	`[]=`	happyx/spa/state.html#[]=,State[StringTableRef],string,string	proc `[]=`(self: State[StringTableRef]; idx: string; value: string)		275
nim	items	happyx/spa/state.html#items.i,State[openArray[T]]	iterator items[T](self: State[openArray[T]]): T		282
nim	pairs	happyx/spa/state.html#pairs.i,State[TableRef[T,U]]	iterator pairs[T, U](self: State[TableRef[T, U]]): (T, U)		288
nim	toBool	happyx/spa/state.html#toBool.c,State[bool]	converter toBool(self: State[bool]): bool		294
nim	toString	happyx/spa/state.html#toString.c,State[string]	converter toString(self: State[string]): string		297
nim	toCString	happyx/spa/state.html#toCString.c,State[cstring]	converter toCString(self: State[cstring]): cstring		300
nim	toInt	happyx/spa/state.html#toInt.c,State[int]	converter toInt(self: State[int]): int		303
nim	toFloat	happyx/spa/state.html#toFloat.c,State[float]	converter toFloat(self: State[float]): float		306
nim	toChar	happyx/spa/state.html#toChar.c,State[char]	converter toChar(self: State[char]): char		309
nim	toInt8	happyx/spa/state.html#toInt8.c,State[int8]	converter toInt8(self: State[int8]): int8		312
nim	toInt16	happyx/spa/state.html#toInt16.c,State[int16]	converter toInt16(self: State[int16]): int16		315
nim	toInt32	happyx/spa/state.html#toInt32.c,State[int32]	converter toInt32(self: State[int32]): int32		318
nim	toInt64	happyx/spa/state.html#toInt64.c,State[int64]	converter toInt64(self: State[int64]): int64		321
nim	toFloat32	happyx/spa/state.html#toFloat32.c,State[float32]	converter toFloat32(self: State[float32]): float32		324
nim	toFloat64	happyx/spa/state.html#toFloat64.c,State[float64]	converter toFloat64(self: State[float64]): float64		327
nim	toSeq	happyx/spa/state.html#toSeq.c,State[seq[T]]	converter toSeq[T](self: State[seq[T]]): seq[T]		330
nim	set	happyx/spa/state.html#set,LanguageSettings,string	proc set(settings: var LanguageSettings; lang: string)		347
nimgrp	+=	happyx/spa/state.html#+=-procs-all	proc		83
nimgrp	>=	happyx/spa/state.html#>=-procs-all	proc		98
nimgrp	<=	happyx/spa/state.html#<=-procs-all	proc		98
nimgrp	/	happyx/spa/state.html#/-procs-all	proc		74
nimgrp	$=	happyx/spa/state.html#$=-procs-all	proc		83
nimgrp	&	happyx/spa/state.html#&-procs-all	proc		74
nimgrp	~=	happyx/spa/state.html#~=-procs-all	proc		83
nimgrp	<	happyx/spa/state.html#<-procs-all	proc		74
nimgrp	[]=	happyx/spa/state.html#[]=-procs-all	proc		254
nimgrp	|=	happyx/spa/state.html#|=-procs-all	proc		83
nimgrp	^	happyx/spa/state.html#^-procs-all	proc		74
nimgrp	*	happyx/spa/state.html#*-procs-all	proc		74
nimgrp	>	happyx/spa/state.html#>-procs-all	proc		74
nimgrp	-	happyx/spa/state.html#--procs-all	proc		74
nimgrp	@=	happyx/spa/state.html#@=-procs-all	proc		83
nimgrp	:=	happyx/spa/state.html#:=-procs-all	proc		83
nimgrp	@	happyx/spa/state.html#@-procs-all	proc		74
nimgrp	-=	happyx/spa/state.html#-=-procs-all	proc		83
nimgrp	&=	happyx/spa/state.html#&=-procs-all	proc		83
nimgrp	%=	happyx/spa/state.html#%=-procs-all	proc		83
nimgrp	set	happyx/spa/state.html#set-procs-all	proc		217
nimgrp	!=	happyx/spa/state.html#!=-procs-all	proc		98
nimgrp	!	happyx/spa/state.html#!-procs-all	proc		74
nimgrp	/=	happyx/spa/state.html#/=-procs-all	proc		83
nimgrp	^=	happyx/spa/state.html#^=-procs-all	proc		83
nimgrp	==	happyx/spa/state.html#==-procs-all	proc		98
nimgrp	+	happyx/spa/state.html#+-procs-all	proc		74
nimgrp	*=	happyx/spa/state.html#*=-procs-all	proc		83
nimgrp	[]	happyx/spa/state.html#[]-procs-all	proc		224
nimgrp	%	happyx/spa/state.html#%-procs-all	proc		74
heading	Examples:	happyx/spa/state.html#state-🍍-examplescolon	  Examples:		0
heading	State 🍍	happyx/spa/state.html#state-🍍	 State 🍍		0
heading	Usage ⚡	happyx/spa/state.html#state-🍍-usage-⚡	  Usage ⚡		0
