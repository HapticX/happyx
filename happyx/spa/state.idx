nimTitle	state	happyx/spa/state.html	module src/happyx/spa/state		0
nim	State	happyx/spa/state.html#State	type State		37
nim	enableRouting	happyx/spa/state.html#enableRouting	var enableRouting		41
nim	remember	happyx/spa/state.html#remember,T	proc remember[T](val: T): State[T]		44
nim	val=	happyx/spa/state.html#val=.t,State[T],T	template val=[T](self: State[T]; value: T)		56
nim	`$`	happyx/spa/state.html#$,State[T]	proc `$`[T](self: State[T]): string		62
nim	`==`	happyx/spa/state.html#==,,	proc `==`[T](self`gensym0, other`gensym0: State[T]): bool		117
nim	`==`	happyx/spa/state.html#==,,T	proc `==`[T](self`gensym0: State[T]; other`gensym0: T): bool		128
nim	`!=`	happyx/spa/state.html#!=,,	proc `!=`[T](self`gensym1, other`gensym1: State[T]): bool		117
nim	`!=`	happyx/spa/state.html#!=,,T	proc `!=`[T](self`gensym1: State[T]; other`gensym1: T): bool		129
nim	`>=`	happyx/spa/state.html#>=,,	proc `>=`[T](self`gensym2, other`gensym2: State[T]): bool		117
nim	`>=`	happyx/spa/state.html#>=,,T	proc `>=`[T](self`gensym2: State[T]; other`gensym2: T): bool		130
nim	`<=`	happyx/spa/state.html#<=,,	proc `<=`[T](self`gensym3, other`gensym3: State[T]): bool		117
nim	`<=`	happyx/spa/state.html#<=,,T	proc `<=`[T](self`gensym3: State[T]; other`gensym3: T): bool		131
nim	`not`	happyx/spa/state.html#not	proc `not`[T](self`gensym4: State[T]): bool		133
nim	`&`	happyx/spa/state.html#&,,	proc `&`[T](self`gensym5, other`gensym5: State[T]): T		81
nim	`&`	happyx/spa/state.html#&,T,	proc `&`[T](other`gensym5: T; self`gensym5: State[T]): T		83
nim	`&`	happyx/spa/state.html#&,,T	proc `&`[T](self`gensym5: State[T]; other`gensym5: T): T		135
nim	`+`	happyx/spa/state.html#+,,	proc `+`[T](self`gensym6, other`gensym6: State[T]): T		81
nim	`+`	happyx/spa/state.html#+,T,	proc `+`[T](other`gensym6: T; self`gensym6: State[T]): T		83
nim	`+`	happyx/spa/state.html#+,,T	proc `+`[T](self`gensym6: State[T]; other`gensym6: T): T		136
nim	`-`	happyx/spa/state.html#-,,	proc `-`[T](self`gensym7, other`gensym7: State[T]): T		81
nim	`-`	happyx/spa/state.html#-,T,	proc `-`[T](other`gensym7: T; self`gensym7: State[T]): T		83
nim	`-`	happyx/spa/state.html#-,,T	proc `-`[T](self`gensym7: State[T]; other`gensym7: T): T		137
nim	`*`	happyx/spa/state.html#*,,	proc `*`[T](self`gensym8, other`gensym8: State[T]): T		81
nim	`*`	happyx/spa/state.html#*,T,	proc `*`[T](other`gensym8: T; self`gensym8: State[T]): T		83
nim	`*`	happyx/spa/state.html#*,,T	proc `*`[T](self`gensym8: State[T]; other`gensym8: T): T		138
nim	`/`	happyx/spa/state.html#/,,	proc `/`[T](self`gensym9, other`gensym9: State[T]): T		81
nim	`/`	happyx/spa/state.html#/,T,	proc `/`[T](other`gensym9: T; self`gensym9: State[T]): T		83
nim	`/`	happyx/spa/state.html#/,,T	proc `/`[T](self`gensym9: State[T]; other`gensym9: T): T		139
nim	`!`	happyx/spa/state.html#!,,	proc `!`[T](self`gensym10, other`gensym10: State[T]): T		81
nim	`!`	happyx/spa/state.html#!,T,	proc `!`[T](other`gensym10: T; self`gensym10: State[T]): T		83
nim	`!`	happyx/spa/state.html#!,,T	proc `!`[T](self`gensym10: State[T]; other`gensym10: T): T		140
nim	`^`	happyx/spa/state.html#^,,	proc `^`[T](self`gensym11, other`gensym11: State[T]): T		81
nim	`^`	happyx/spa/state.html#^,T,	proc `^`[T](other`gensym11: T; self`gensym11: State[T]): T		83
nim	`^`	happyx/spa/state.html#^,,T	proc `^`[T](self`gensym11: State[T]; other`gensym11: T): T		141
nim	`%`	happyx/spa/state.html#%,,	proc `%`[T](self`gensym12, other`gensym12: State[T]): T		81
nim	`%`	happyx/spa/state.html#%,T,	proc `%`[T](other`gensym12: T; self`gensym12: State[T]): T		83
nim	`%`	happyx/spa/state.html#%,,T	proc `%`[T](self`gensym12: State[T]; other`gensym12: T): T		142
nim	`@`	happyx/spa/state.html#@,,	proc `@`[T](self`gensym13, other`gensym13: State[T]): T		81
nim	`@`	happyx/spa/state.html#@,T,	proc `@`[T](other`gensym13: T; self`gensym13: State[T]): T		83
nim	`@`	happyx/spa/state.html#@,,T	proc `@`[T](self`gensym13: State[T]; other`gensym13: T): T		143
nim	`>`	happyx/spa/state.html#>,,	proc `>`[T](self`gensym14, other`gensym14: State[T]): T		81
nim	`>`	happyx/spa/state.html#>,T,	proc `>`[T](other`gensym14: T; self`gensym14: State[T]): T		83
nim	`>`	happyx/spa/state.html#>,,T	proc `>`[T](self`gensym14: State[T]; other`gensym14: T): T		144
nim	`<`	happyx/spa/state.html#<,,	proc `<`[T](self`gensym15, other`gensym15: State[T]): T		81
nim	`<`	happyx/spa/state.html#<,T,	proc `<`[T](other`gensym15: T; self`gensym15: State[T]): T		83
nim	`<`	happyx/spa/state.html#<,,T	proc `<`[T](self`gensym15: State[T]; other`gensym15: T): T		145
nim	`*=`	happyx/spa/state.html#*=.t,,	template `*=`[T](self`gensym16: State[T]; other`gensym16: State[T])		105
nim	`*=`	happyx/spa/state.html#*=.t,T,	template `*=`[T](other`gensym16: T; self`gensym16: State[T])		108
nim	`*=`	happyx/spa/state.html#*=.t,,T	template `*=`[T](self`gensym16: State[T]; other`gensym16: T)		147
nim	`+=`	happyx/spa/state.html#+=.t,,	template `+=`[T](self`gensym17: State[T]; other`gensym17: State[T])		105
nim	`+=`	happyx/spa/state.html#+=.t,T,	template `+=`[T](other`gensym17: T; self`gensym17: State[T])		108
nim	`+=`	happyx/spa/state.html#+=.t,,T	template `+=`[T](self`gensym17: State[T]; other`gensym17: T)		148
nim	`-=`	happyx/spa/state.html#-=.t,,	template `-=`[T](self`gensym18: State[T]; other`gensym18: State[T])		105
nim	`-=`	happyx/spa/state.html#-=.t,T,	template `-=`[T](other`gensym18: T; self`gensym18: State[T])		108
nim	`-=`	happyx/spa/state.html#-=.t,,T	template `-=`[T](self`gensym18: State[T]; other`gensym18: T)		149
nim	`/=`	happyx/spa/state.html#/=.t,,	template `/=`[T](self`gensym19: State[T]; other`gensym19: State[T])		105
nim	`/=`	happyx/spa/state.html#/=.t,T,	template `/=`[T](other`gensym19: T; self`gensym19: State[T])		108
nim	`/=`	happyx/spa/state.html#/=.t,,T	template `/=`[T](self`gensym19: State[T]; other`gensym19: T)		150
nim	`^=`	happyx/spa/state.html#^=.t,,	template `^=`[T](self`gensym20: State[T]; other`gensym20: State[T])		105
nim	`^=`	happyx/spa/state.html#^=.t,T,	template `^=`[T](other`gensym20: T; self`gensym20: State[T])		108
nim	`^=`	happyx/spa/state.html#^=.t,,T	template `^=`[T](self`gensym20: State[T]; other`gensym20: T)		151
nim	`&=`	happyx/spa/state.html#&=.t,,	template `&=`[T](self`gensym21: State[T]; other`gensym21: State[T])		105
nim	`&=`	happyx/spa/state.html#&=.t,T,	template `&=`[T](other`gensym21: T; self`gensym21: State[T])		108
nim	`&=`	happyx/spa/state.html#&=.t,,T	template `&=`[T](self`gensym21: State[T]; other`gensym21: T)		152
nim	`%=`	happyx/spa/state.html#%=.t,,	template `%=`[T](self`gensym22: State[T]; other`gensym22: State[T])		105
nim	`%=`	happyx/spa/state.html#%=.t,T,	template `%=`[T](other`gensym22: T; self`gensym22: State[T])		108
nim	`%=`	happyx/spa/state.html#%=.t,,T	template `%=`[T](self`gensym22: State[T]; other`gensym22: T)		153
nim	`$=`	happyx/spa/state.html#$=.t,,	template `$=`[T](self`gensym23: State[T]; other`gensym23: State[T])		105
nim	`$=`	happyx/spa/state.html#$=.t,T,	template `$=`[T](other`gensym23: T; self`gensym23: State[T])		108
nim	`$=`	happyx/spa/state.html#$=.t,,T	template `$=`[T](self`gensym23: State[T]; other`gensym23: T)		154
nim	`@=`	happyx/spa/state.html#@=.t,,	template `@=`[T](self`gensym24: State[T]; other`gensym24: State[T])		105
nim	`@=`	happyx/spa/state.html#@=.t,T,	template `@=`[T](other`gensym24: T; self`gensym24: State[T])		108
nim	`@=`	happyx/spa/state.html#@=.t,,T	template `@=`[T](self`gensym24: State[T]; other`gensym24: T)		155
nim	`:=`	happyx/spa/state.html#:=.t,,	template `:=`[T](self`gensym25: State[T]; other`gensym25: State[T])		105
nim	`:=`	happyx/spa/state.html#:=.t,T,	template `:=`[T](other`gensym25: T; self`gensym25: State[T])		108
nim	`:=`	happyx/spa/state.html#:=.t,,T	template `:=`[T](self`gensym25: State[T]; other`gensym25: T)		156
nim	`|=`	happyx/spa/state.html#|=.t,,	template `|=`[T](self`gensym26: State[T]; other`gensym26: State[T])		105
nim	`|=`	happyx/spa/state.html#|=.t,T,	template `|=`[T](other`gensym26: T; self`gensym26: State[T])		108
nim	`|=`	happyx/spa/state.html#|=.t,,T	template `|=`[T](self`gensym26: State[T]; other`gensym26: T)		157
nim	`~=`	happyx/spa/state.html#~=.t,,	template `~=`[T](self`gensym27: State[T]; other`gensym27: State[T])		105
nim	`~=`	happyx/spa/state.html#~=.t,T,	template `~=`[T](other`gensym27: T; self`gensym27: State[T])		108
nim	`~=`	happyx/spa/state.html#~=.t,,T	template `~=`[T](self`gensym27: State[T]; other`gensym27: T)		158
nim	`->`	happyx/spa/state.html#->.m,State,untyped	macro `->`(self: State; field: untyped): untyped		161
nim	get	happyx/spa/state.html#get,State[T]	proc get[T](self: State[T]): T		229
nim	len	happyx/spa/state.html#len,State[T]	proc len[T](self: State[T]): int		235
nim	low	happyx/spa/state.html#low,State[T]	proc low[T](self: State[T]): int		240
nim	high	happyx/spa/state.html#high,State[T]	proc high[T](self: State[T]): int		245
nim	set	happyx/spa/state.html#set.t,State[T],T	template set[T](self: State[T]; value: T)		257
nim	`[]`	happyx/spa/state.html#[],State[array[T,U]],int	proc `[]`[T, U](self: State[array[T, U]]; idx: int): T		263
nim	`[]`	happyx/spa/state.html#[],State[seq[T]],int	proc `[]`[T](self: State[seq[T]]; idx: int): T		268
nim	`[]`	happyx/spa/state.html#[],State[array[T,U]],State[int]	proc `[]`[T, U](self: State[array[T, U]]; idx: State[int]): T		273
nim	`[]`	happyx/spa/state.html#[],State[seq[T]],State[int]	proc `[]`[T](self: State[seq[T]]; idx: State[int]): T		278
nim	`[]`	happyx/spa/state.html#[],State[TableRef[T,U]],T	proc `[]`[T, U](self: State[TableRef[T, U]]; idx: T): U		283
nim	`[]`	happyx/spa/state.html#[],State[StringTableRef],string	proc `[]`(self: State[StringTableRef]; idx: string): string		288
nim	`[]=`	happyx/spa/state.html#[]=,State[seq[T]],int,T	proc `[]=`[T](self: State[seq[T]]; idx: int; value: T)		320
nim	`[]=`	happyx/spa/state.html#[]=,State[array[T,U]],int,T	proc `[]=`[T, U](self: State[array[T, U]]; idx: int; value: T)		327
nim	`[]=`	happyx/spa/state.html#[]=,State[TableRef[T,U]],T,U	proc `[]=`[T, U](self: State[TableRef[T, U]]; idx: T; value: U)		334
nim	`[]=`	happyx/spa/state.html#[]=,State[StringTableRef],string,string	proc `[]=`(self: State[StringTableRef]; idx: string; value: string)		341
nim	items	happyx/spa/state.html#items.i,State[openArray[T]]	iterator items[T](self: State[openArray[T]]): T		348
nim	pairs	happyx/spa/state.html#pairs.i,State[TableRef[T,U]]	iterator pairs[T, U](self: State[TableRef[T, U]]): (T, U)		354
nim	toBool	happyx/spa/state.html#toBool.c,State[bool]	converter toBool(self: State[bool]): bool		360
nim	toString	happyx/spa/state.html#toString.c,State[string]	converter toString(self: State[string]): string		363
nim	toCString	happyx/spa/state.html#toCString.c,State[cstring]	converter toCString(self: State[cstring]): cstring		366
nim	toInt	happyx/spa/state.html#toInt.c,State[int]	converter toInt(self: State[int]): int		369
nim	toFloat	happyx/spa/state.html#toFloat.c,State[float]	converter toFloat(self: State[float]): float		372
nim	toChar	happyx/spa/state.html#toChar.c,State[char]	converter toChar(self: State[char]): char		375
nim	toInt8	happyx/spa/state.html#toInt8.c,State[int8]	converter toInt8(self: State[int8]): int8		378
nim	toInt16	happyx/spa/state.html#toInt16.c,State[int16]	converter toInt16(self: State[int16]): int16		381
nim	toInt32	happyx/spa/state.html#toInt32.c,State[int32]	converter toInt32(self: State[int32]): int32		384
nim	toInt64	happyx/spa/state.html#toInt64.c,State[int64]	converter toInt64(self: State[int64]): int64		387
nim	toFloat32	happyx/spa/state.html#toFloat32.c,State[float32]	converter toFloat32(self: State[float32]): float32		390
nim	toFloat64	happyx/spa/state.html#toFloat64.c,State[float64]	converter toFloat64(self: State[float64]): float64		393
nim	toSeq	happyx/spa/state.html#toSeq.c,State[seq[T]]	converter toSeq[T](self: State[seq[T]]): seq[T]		396
nim	set	happyx/spa/state.html#set,LanguageSettings,string	proc set(settings: var LanguageSettings; lang: string)		413
nimgrp	>=	happyx/spa/state.html#>=-procs-all	proc		117
nimgrp	<=	happyx/spa/state.html#<=-procs-all	proc		117
nimgrp	/	happyx/spa/state.html#/-procs-all	proc		81
nimgrp	&	happyx/spa/state.html#&-procs-all	proc		81
nimgrp	[]=	happyx/spa/state.html#[]=-procs-all	proc		320
nimgrp	<	happyx/spa/state.html#<-procs-all	proc		81
nimgrp	^	happyx/spa/state.html#^-procs-all	proc		81
nimgrp	*	happyx/spa/state.html#*-procs-all	proc		81
nimgrp	>	happyx/spa/state.html#>-procs-all	proc		81
nimgrp	-	happyx/spa/state.html#--procs-all	proc		81
nimgrp	@	happyx/spa/state.html#@-procs-all	proc		81
nimgrp	!=	happyx/spa/state.html#!=-procs-all	proc		117
nimgrp	!	happyx/spa/state.html#!-procs-all	proc		81
nimgrp	==	happyx/spa/state.html#==-procs-all	proc		117
nimgrp	+	happyx/spa/state.html#+-procs-all	proc		81
nimgrp	[]	happyx/spa/state.html#[]-procs-all	proc		263
nimgrp	%	happyx/spa/state.html#%-procs-all	proc		81
nimgrp	+=	happyx/spa/state.html#+=-templates-all	template		105
nimgrp	~=	happyx/spa/state.html#~=-templates-all	template		105
nimgrp	$=	happyx/spa/state.html#$=-templates-all	template		105
nimgrp	|=	happyx/spa/state.html#|=-templates-all	template		105
nimgrp	@=	happyx/spa/state.html#@=-templates-all	template		105
nimgrp	:=	happyx/spa/state.html#:=-templates-all	template		105
nimgrp	&=	happyx/spa/state.html#&=-templates-all	template		105
nimgrp	-=	happyx/spa/state.html#-=-templates-all	template		105
nimgrp	%=	happyx/spa/state.html#%=-templates-all	template		105
nimgrp	^=	happyx/spa/state.html#^=-templates-all	template		105
nimgrp	/=	happyx/spa/state.html#/=-templates-all	template		105
nimgrp	*=	happyx/spa/state.html#*=-templates-all	template		105
heading	Examples:	happyx/spa/state.html#state-🍍-examplescolon	  Examples:		0
heading	State 🍍	happyx/spa/state.html#state-🍍	 State 🍍		0
heading	Usage ⚡	happyx/spa/state.html#state-🍍-usage-⚡	  Usage ⚡		0
